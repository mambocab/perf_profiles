# based on http://enigmacurry.com/tmp/abtests.yaml
keyspace: abtests
keyspace_definition: |
  CREATE KEYSPACE abtests WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};

table: allocations
table_definition: |
  CREATE TABLE allocations (
        user_id text,
        profile_id text,
        test_id int,
        cell int,
        enabled boolean,
        PRIMARY KEY((user_id,profile_id),test_id)
  ) WITH compaction = { 'class':'SizeTieredCompactionStrategy', 'min_threshold': 32 }
    AND comment='a sample A/B testing database of customer allocation data'
    AND compression = { 'sstable_compression': 'LZ4Compressor' }

columnspec:
  - name: user_id
    size: uniform(9..13)
    population: uniform(1..1M)
  - name: profile_id
    cluster: exp(1..10)
    size: extreme(9..13,2)
    population: uniform(1..1000)
  - name: test_id
    population: uniform(1..1000)
    cluster: extreme(1..17,2)
  - name: cell
    population: uniform(0..12)

insert:
  partitions: uniform(1..4)       # number of unique partitions to update in a single operation
                                  # if batchcount > 1, multiple batches will be used but all partitions will
                                  # occur in all batches (unless they finish early); only the row counts will vary
  batchtype: UNLOGGED               # type of batch to use
  select: uniform(1..10)/10       # uniform chance any single generated CQL row will be visited in a partition;
                                  # generated for each partition independently, each time we visit it

#
# A list of queries you wish to run against the schema
#
queries:
  read:
    cql: select * from allocations where user_id = ? and profile_id = ? LIMIT 50
    fields: multirow             # samerow or multirow (select arguments from the same row, or randomly from all rows in the partition)
  readslice:                      # reads a wide slice
    cql: select * from allocations where test_id > ? and profile_id < ?
    fields: multirow
  deletecells:
    cql: delete enabled from allocations where user_id = ? and profile_id = ?
    fields: samerow
  deleterange:
    cql: delete cell, enabled from allocations where user_id = ? and profile_id = ? and test_id > ?
    fields: samerow
